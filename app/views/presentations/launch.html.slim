.reveal
  .state-background
  .slides
    section class="slide" data-slide-num="0"
      h1= @presentation.name
      / h4= "http://twitter.com/#{@presentation.user.nickname}"

    - @presentation.slides.each_with_index do |slide,i|
      section data-slide-num="#{i+1}"
        - slide.contents.each do |content|
          div class="slide-content #{content.content_type.name.downcase}"
            = output_content(content)
  aside class="controls"
    a class="left" href="#"
      | &#x25C4;
    a class="right" href="#"
      | &#x25BA;
    a class="up" href="#"
      | &#x25B2;
    a class="down" href="#"
      | &#x25BC;

  .progress
    span


- if current_user.id == @presentation.user_id
  javascript:

    $(function() {
    	var presentation_id = $('body').data('presentation_id');
      // connect to server like normal
      var dispatcher = new WebSocketRails("#{@websocket_path}");
    	var channel = dispatcher.subscribe('party_'+presentation_id);


      // bind to a channel event
      channel.bind('client_connected', function(data) {
        //$('#debug').append('channel event received: ' + data + '\n');
        console.log(data)
      });

      Reveal.initialize({
          controls: false,
          progress: true,
          history: true,
          
          theme: Reveal.getQueryHash().theme || 'default', // available themes are in /css/theme
          transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/linear(2d)
  
          // Optional libraries used to extend on reveal.js
          dependencies: [
                        { src: 'http://amoose.github.io/presentations/lib/js/highlight.js', async: true, callback: function() { window.hljs.initHighlightingOnLoad(); } },
                        { src: 'http://amoose.github.io/presentations/lib/js/classList.js', condition: function() { return !document.body.classList; } },
                        { src: 'http://amoose.github.io/presentations/lib/js/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                        { src: 'http://amoose.github.io/presentations/lib/js/data-markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          ]
        });

      Reveal.addEventListener( 'slidechanged', function( event ) {
        var _$slide = $(event.currentSlide);
        var _message = {
          party: presentation_id,
          slide: _$slide.data('slide-num')
        }
        dispatcher.trigger('control_show', _message);
      });
    });


- else
  javascript:
    var presentation_id = $('body').data('presentation_id');
    $(function() {

      var presentation_id = $('body').data('presentation_id');
      var dispatcher = new WebSocketRails("#{@websocket_path}");

      // subscribe to the channel
      var channel = dispatcher.subscribe('party_'+presentation_id);

      console.log(channel)
      // bind to a channel event
      channel.bind('control_show', function(data) {
        console.log('channel event received: ' + data);
        // $('#debug').append(data)
        //$('#goto-slide').val(data.slide)
      });

      // dispatcher.trigger('party.join',"herro")


      // REVEAL
      var reveal = Reveal.initialize({
        controls: false,
        progress: true,
        history: true,
        keyboard: false,
        theme: Reveal.getQueryHash().theme || 'default', // available themes are in /css/theme
        transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/linear(2d)

        // Optional libraries used to extend on reveal.js
        dependencies: [
                      { src: '//amoose.github.io/presentations/lib/js/highlight.js', async: true, callback: function() { window.hljs.initHighlightingOnLoad(); } },
                      { src: '//amoose.github.io/presentations/lib/js/classList.js', condition: function() { return !document.body.classList; } },
                      { src: '//amoose.github.io/presentations/lib/js/showdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
                      { src: '//amoose.github.io/presentations/lib/js/data-markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
        ]
      });

      var currentSlide = 0;
      Reveal.addEventListener( 'ready', function( event ) {
        currentSlide = event.currentSlide;
      });

      Reveal.addEventListener( 'slidechanged', function( event ) {
        var _$slide = $(event.currentSlide);
        if ($('body').hasClass('kibitz')) {
          // $('body').addClass('kibitz');
        } else {

        }
      });

      channel.bind('move_deck', function(data) {
        console.log(data)
        var _new_slide = data['slide'];
        var _cur_slide = currentSlide;
        var _$body = $('body');
        if (_$body.hasClass('kibitz')) {
          Reveal.slide(_new_slide,0,0);
        }
      });

    });